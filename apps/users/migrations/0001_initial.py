# Generated by Django 3.2 on 2021-04-21 18:30

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import users.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Menu',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('codename', models.CharField(max_length=100, unique=True, verbose_name='codename')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name')),
                ('icon', models.CharField(blank=True, default=None, help_text='图标', max_length=100, null=True, verbose_name='图标')),
                ('level', models.IntegerField(choices=[(1, '一级权限'), (2, '二级权限'), (3, '三级权限')], help_text='类目级别', verbose_name='级别')),
                ('path', models.CharField(blank=True, default=None, help_text='路径', max_length=100, null=True, verbose_name='路径')),
                ('component', models.CharField(blank=True, default=None, help_text='组件路径', max_length=100, null=True, verbose_name='组件路径')),
                ('seq', models.CharField(blank=True, default=None, help_text='排序', max_length=100, null=True, verbose_name='排序')),
                ('remark', models.CharField(blank=True, help_text='描述', max_length=255, null=True, verbose_name='描述')),
                ('parentcode', models.ForeignKey(blank=True, max_length=100, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='perm_parent', to='users.menu', verbose_name='上级权限')),
            ],
            options={
                'verbose_name': '菜单',
                'verbose_name_plural': '菜单',
                'ordering': ['name', 'codename'],
                'unique_together': {('name', 'codename')},
            },
        ),
        migrations.CreateModel(
            name='Permission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('codename', models.CharField(max_length=100, unique=True, verbose_name='codename')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting department.', verbose_name='active')),
                ('remark', models.CharField(blank=True, help_text='描述', max_length=255, null=True, verbose_name='描述')),
            ],
            options={
                'verbose_name': '菜单',
                'verbose_name_plural': '菜单',
                'ordering': ['name', 'codename'],
                'unique_together': {('name', 'codename')},
            },
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='角色名称', max_length=255, verbose_name='角色名')),
                ('codename', models.CharField(help_text='角色代码', max_length=100, verbose_name='codename')),
                ('remark', models.CharField(blank=True, help_text='描述', max_length=255, null=True, verbose_name='描述')),
                ('menus', models.ManyToManyField(blank=True, to='users.Menu', verbose_name='菜单')),
                ('permissions', models.ManyToManyField(blank=True, to='users.Permission', verbose_name='权限')),
            ],
            options={
                'verbose_name': '角色',
                'verbose_name_plural': '角色',
            },
        ),
        migrations.CreateModel(
            name='Department',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='部门名称', max_length=100, verbose_name='部门名称')),
                ('codename', models.CharField(help_text='部门代码', max_length=50, verbose_name='部门代码')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting department.', verbose_name='active')),
                ('remark', models.CharField(blank=True, help_text='描述', max_length=255, null=True, verbose_name='描述')),
                ('menus', models.ManyToManyField(blank=True, to='users.Menu', verbose_name='菜单')),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='depart_parent', to='users.department', verbose_name='上级部门')),
                ('permissions', models.ManyToManyField(blank=True, to='users.Permission', verbose_name='权限')),
            ],
            options={
                'verbose_name': '科室',
                'verbose_name_plural': '科室',
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('id', models.AutoField(primary_key=True, serialize=False, verbose_name='用户编号')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('full_name', models.CharField(help_text='姓名', max_length=60, verbose_name='姓名')),
                ('mobile', models.CharField(blank=True, default=None, help_text='电话号码', max_length=20, null=True, unique=True, verbose_name='电话号码')),
                ('sid_num', models.CharField(blank=True, default=None, help_text='身份证号', max_length=18, null=True, unique=True, verbose_name='身份证号')),
                ('avatar', models.ImageField(blank=True, default=None, help_text='用户头像', null=True, upload_to=users.models.PathAndRename('avatar/2021-04-21/'), verbose_name='用户头像')),
                ('is_doctor', models.BooleanField(default=False, help_text='是否医生', null=True, verbose_name='是否医生')),
                ('email', models.EmailField(blank=True, help_text='用于登录验证的邮件地址', max_length=150, verbose_name='邮件地址')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('data_update', models.DateTimeField(auto_now=True, verbose_name='date update')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('departments', models.ForeignKey(blank=True, help_text='The Departments this user belongs to. A user will get all permissions granted to each of their Departments.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='user_set', related_query_name='user', to='users.department', verbose_name='Departments')),
                ('roles', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='users.Role', verbose_name='Roles')),
                ('user_menus', models.ManyToManyField(blank=True, help_text='Specific menus for this user.', related_name='user_set', related_query_name='user', to='users.Menu', verbose_name='用户菜单')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='users.Permission', verbose_name='用户权限')),
            ],
            options={
                'verbose_name': '用户',
                'verbose_name_plural': '用户',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
